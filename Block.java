/** 
 * This is a Java class that represents a single block in a blockchain.
 * A block contains the following properties:
 *   - hash (String): A unique identifier for the block, generated by calculating the hash of the block's data.
 *   - previousHash (String): The hash of the previous block in the blockchain, which links this block to the previous one.
 *   - data (String): The actual data contained within the block.
 *   - timeStamp (long): The time when the block was created, measured in milliseconds since 1/1/1970.
 *   - nonce (int): A random value used to change the hash of the block during the mining process.
 *
 * The class contains a constructor, several getter methods, and two other methods:
 *   - calculateHash(): Calculates the hash of the block based on its properties.
 *   - mineBlock(int difficulty): Increases the nonce value until the hash of the block matches a given target,
 *     which is determined by the difficulty parameter.
 */

package blockchain;
import java.util.Date;

public class Block {

	public String hash;
	public String previousHash;
	private String data;
	private long timeStamp; //milliseconds since 1/1/1970.
	private int nonce;

	// Constructor with calculations
	public Block(String data, String previousHash) {
		this.data = data;
		this.previousHash = previousHash;
		this.timeStamp = new Date().getTime();

		this.hash = calculateHash();
	}

	// only for demonstration purposes
	public String getData() {
		return data;
	}

	public long getTimeStamp() {
		return timeStamp;
	}

	public int getNonce() {
		return nonce;
	}

	// Calculate new hash
	public String calculateHash() {
		String calculatedhash = Utility
				.applySha256(previousHash + Long.toString(timeStamp) + Integer.toString(nonce) + data);
		return calculatedhash;
	}

	// Increases nonce value until hash target is reached.
	public void mineBlock(int difficulty) {
		String target = Utility.getDificultyString(difficulty); // Create a string with difficulty * 0
		while (!hash.substring(0, difficulty).equals(target)) {
			nonce++;
			hash = calculateHash();
		}
		System.out.println("Block Mined Successfully: " + hash);
	}
}
